generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  bookings      Booking[]
  rider         Rider?
  sessions      Session[]
  shipments     Shipment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id                  String        @id @default(cuid())
  userId              String
  pickupAddress       String
  deliveryAddress     String
  pickupDate          DateTime
  deliveryDate        DateTime
  pickupTime          String
  deliveryTime        String
  packageSize         PackageSize
  packageDescription  String?
  status              Status        @default(PROCESSING)
  isUrgent            Boolean
  createdAt           DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime      @updatedAt
  riderId             String?
  paymentMethod       PaymentMethod
  route               String
  price               Float
  pickupPhoneNumber   String
  deliveryPhoneNumber String
  notificationSent    Boolean       @default(false)
  riderResponse       Response      @default(PENDING)
  rider               Rider?        @relation(fields: [riderId], references: [id])
  user                User          @relation(fields: [userId], references: [id])
  shipment            Shipment?

  @@index([userId])
  @@index([riderId])
  @@index([status])
}

model Rider {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  userId    String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id])
}

model Shipment {
  id                String         @id @default(cuid())
  trackingNumber    String         @unique
  status            ShipmentStatus
  currentLocation   String?
  estimatedDelivery DateTime?
  userId            String
  bookingId         String?        @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  booking           Booking?       @relation(fields: [bookingId], references: [id])
  user              User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

enum Role {
  ADMIN
  USER
  RIDER
}

enum Status {
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

enum ShipmentStatus {
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

enum PackageSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
}

enum Response {
  ACCEPTED
  REJECTED
  PENDING
}
