// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id                  Int       @id @default(autoincrement())
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  pickupAddress       String
  deliveryAddress     String
  pickupDate          DateTime
  deliveryDate        DateTime
  pickupTime          String
  deliveryTime        String
  packageSize         String
  packageDescription  String?
  status              Status    @default(PENDING)
  isUrgent            Boolean
  createdAt           DateTime  @default(now()) @db.Timestamptz
  updatedAt           DateTime  @updatedAt
  rider               Rider?    @relation(fields: [riderId], references: [id])
  riderId             String?
  paymentMethod       String
  route               String
  price               Float
  pickupPhoneNumber   String
  deliveryPhoneNumber String
}

model Rider {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
}

enum Role {
  USER
  ADMIN
  RIDER
}

enum Status {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}